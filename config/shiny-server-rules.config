run_as {
  # Description of the directive
  desc "The user the app should be run as. This user should have the minimal amount of privileges necessary to successfully run the application (i.e. read-only access to the Shiny application directory). Note that this directive cannot be used with `user_apps`, as `user_apps` always run as the user who owns the application.";

  # required parameter
  param String user "The username that should be used to run the app";

  # List of parent node names that are valid for this directive ($ means root)
  at $ server location;

  # Up to how many times can this directive appear within a node's scope (not
  # including descendant nodes)?
  maxcount 1;
}

socket_dir {
  desc "The path to the (empty) directory within which Shiny worker processes should create domain sockets. The directory should be owned by root with permissions set to `0333`. Defaults to `/var/shiny-server/sockets` if this directive is not present.";
  param String path "The domain socket directory path (should be absolute).";
  at $;
  undocumented;
}

access_log {
  desc "The file path of the HTTP access log.";
  param String path "The file path where the access log should be written";
  param String [format] "The log file format; see [Connect documentation](http://www.senchalabs.org/connect/logger.html) under \"Formats\"" default;
  at $;
}

server {
  desc "Declares an HTTP server. You need one of these for each port/IP address combination this Shiny Server instance should listen on.";
  at $;
}

listen {
  desc "Directs the enclosing server scope to listen on the specified port/IP address combination.";
  param Integer port "Port to listen on";
  # Optional parameter
  param String [host] "IPv4 address to listen on (`*` or `0.0.0.0` for all); hostnames are not currently allowed, please use raw IPv4 address only" *;
  at server;
  maxcount 1;
}

server_name {
  desc "Directs the enclosing server scope to only honor requests that have the given host headers (i.e. virtual hosts).";
  # Variadic parameter
  param String names... "The virtual hostname(s) to bind this server to";
  at server;
  maxcount 1;
}

location {
  desc "Creates a scope that configures the given URL as a website (`site_dir`), specific application (`app_dir`), autouser root (`user_apps`), or redirect to a different URL (`redirect`).";
  param String path "The request path that this location should match";
  at server location;
}

site_dir {
  desc "Configures the enclosing location scope to be a website that can contain both Shiny applications and unrelated static assets in a single directory tree.";
  param String rootPath "The path to the root directory of the website";
  at location;
  maxcount 1;
  precludes user_apps app_dir redirect;
}

directory_index {
  desc "When enabled, if a directory is requested by the client and an `index.html` file is not present, a list of the directory contents is created automatically and returned to the client. If this directive is not present in a custom config file, the default behavior is to disable directory indexes. However, it is enabled if no config file is present at all (in other words, the default config file has it enabled).";
  param Boolean enabled "Whether directory contents should automatically displayed";
  at $ server location;
  maxcount 1;
}

user_apps {
  desc "Configures the enclosing location scope to be an autouser root, meaning that applications will be served up from users' ~/ShinyApps directories.";
  param Boolean [enabled] "Whether this location should serve up all users' ~/ShinyApps directories" on;
  at location;
  maxcount 1;
  precludes app_dir redirect log_dir run_as;
}

app_dir {
  desc "Configures the enclosing location scope to serve up the specified Shiny application.";
  param String path "The path to the Shiny application directory";
  at location;
  maxcount 1;
  precludes redirect;
}

redirect {
  desc "Configures the enclosing location to redirect all requests to the specified URL.";
  param String url "The URL (or base URL) to redirect to";
  param Integer [statusCode] "The status code to send with the response (usually 301 for permanent redirects or 302 for temporary redirects)" 302;
  param Boolean [exact] "Whether to match on the URL exactly; if false, any subpaths will match as well" true;

  at location;
  maxcount 1;

  precludes log_dir google_analytics_id;
}

log_dir {
  desc "Directs the application to write error logs to the specified directory. Only applies to location scopes that are configured with `app_dir` or `site_dir`, as `user_apps` (autouser) always writes error logs to `~/ShinyApps/log`.";
  param String path "The path to which application log files should be written";
  at $ server location;
  maxcount 1;
}

members_of {
  desc "Restricts a `user_apps` (autouser) scope to require membership in one or more groups (or, if no arguments are passed, lifts group restrictions from a `members_of` directive in a parent scope).";
  param String groups... "Users must be a member of at least one of these groups in order to deploy applications; if no groups are provided, then all users are allowed";
  at $ server location;
  maxcount 1;
}

google_analytics_id {
  desc "Configure Google Analytics tracking code to be inserted in Shiny application pages.";
  param String gaid "The Google tracking ID, for example, UA-18988-1";
  at $ server location;
  internal true;  # Probably shouldn't document this since it will change soon
}

application {
  desc "Defines the parameters for an application. The values defined in the global configuration file will be used as defaults, and individual applications can override those defaults by placing a file named '.shiny_app.conf' in the base directory of an application.";
  param String appDir "Specify the application by its app directory.";
  at location;
}

app_init_timeout {
  desc "Defines the amount of time Shiny Server will wait for an R process to start before giving up.";
  param Integer timeout "The number of seconds to wait for the application to start.";
  at $ server location application;
  maxcount 1;
}

app_idle_timeout {
  desc "Defines the amount of time an R process will persist with no connections before being terminated.";
  param Integer timeout "The number of seconds to keep an empty R process alive before killing it.";
  at $ server location application;
  maxcount 1;
}

simple_scheduler {
  desc "A basic scheduler which will spawn one single-threaded R worker for each application. If no scheduler is specified, this is the default scheduler.";
  param Integer [maxRequests] "The maximum number of requests to assign to this scheduler before it should start returning rejecting incoming traffic using a '503 - Service Unavailable' message. Once this threshold is hit, users attempting to initialize a new sessio will receive 503 errors." 100;
  at $ server location application;
  maxcount 1;
}

allow_app_override {
  desc "If present, will allow users to override the global defaults for a scheduler by customizing the parameters associated with a scheduler or even the type of scheduler used.";
  at $;
  param Boolean [enabled] "Whether or not this is enabled. Default is true." true;
  maxcount 1;
}